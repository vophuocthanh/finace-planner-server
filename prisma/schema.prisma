generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String           @id @default(uuid())
  email                     String           @unique
  password                  String
  confirmPassword           String?
  phone                     String?
  address                   String?
  avatar                    String?
  name                      String
  date_of_birth             DateTime?
  country                   String?
  createAt                  DateTime         @default(now())
  updateAt                  DateTime?        @updatedAt
  roleId                    String?
  verificationCode          String?
  verificationCodeExpiresAt DateTime?
  isVerified                Boolean          @default(false)
  role                      Role?            @relation(fields: [roleId], references: [id])
  points                    Int?             @default(0)
  personalIncomes           PersonalIncome[]
  expenses                  Expense[]
  savings                   Saving[]
  investments               Investment[]
  budgets                   Budget[]
  monthlies                 Monthly[]
  Yearly                    Yearly[]

  @@map("users")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("roles")
}

model Yearly {
  id        String    @id @default(uuid())
  userId    String
  year      Int
  createAt  DateTime  @default(now())
  updateAt  DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  monthlies Monthly[]

  @@map("yearlies")
}

model Monthly {
  id              String           @id @default(uuid())
  userId          String
  yearId          String
  nameMonth       String
  createAt        DateTime         @default(now())
  updateAt        DateTime?        @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  yearly          Yearly           @relation(fields: [yearId], references: [id])
  personalIncomes PersonalIncome[]
  expenses        Expense[]
  savings         Saving[]
  investments     Investment[]
  budgets         Budget[]

  @@map("monthlies")
}

// Bảng danh mục
model Category {
  id              String           @id @default(uuid())
  name            String           @unique
  type            CategoryType
  personalIncomes PersonalIncome[]
  expenses        Expense[]
  Budget          Budget[]

  @@map("categories")
}

enum CategoryType {
  INCOME
  EXPENSE
}

// Bảng thu nhập cá nhân
model PersonalIncome {
  id          String    @id @default(uuid())
  userId      String
  categoryId  String
  amount      Float
  description String?
  createAt    DateTime  @default(now())
  updateAt    DateTime? @updatedAt
  monthlyId   String
  monthly     Monthly   @relation(fields: [monthlyId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@map("personal_incomes")
}

// Bảng chi tiêu
model Expense {
  id          String    @id @default(uuid())
  userId      String
  categoryId  String
  amount      Float
  description String?
  createAt    DateTime  @default(now())
  updateAt    DateTime? @updatedAt
  monthlyId   String
  monthly     Monthly   @relation(fields: [monthlyId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@map("expenses")
}

// Bảng tiết kiệm
model Saving {
  id        String    @id @default(uuid())
  userId    String
  amount    Float
  goal      String? // Mục đích tiết kiệm
  createAt  DateTime  @default(now())
  updateAt  DateTime? @updatedAt
  monthlyId String
  monthly   Monthly   @relation(fields: [monthlyId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("savings")
}

// Bảng đầu tư
model Investment {
  id          String    @id @default(uuid())
  userId      String
  name        String
  amount      Float
  returnRate  Float? // Tỷ suất lợi nhuận
  description String?
  createAt    DateTime  @default(now())
  updateAt    DateTime? @updatedAt
  monthlyId   String
  monthly     Monthly   @relation(fields: [monthlyId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("investments")
}

// Bảng ngân sách
model Budget {
  id          String    @id @default(uuid())
  userId      String
  categoryId  String?
  name        String?
  limitAmount Float
  createAt    DateTime  @default(now())
  updateAt    DateTime? @updatedAt
  monthlyId   String
  monthly     Monthly   @relation(fields: [monthlyId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("budgets")
}
